
Aquisicao Temperatura.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c40  08002c40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c40  08002c40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c40  08002c40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002c54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002c54  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059a2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001607  00000000  00000000  000259d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005c0  00000000  00000000  00026fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f8  00000000  00000000  000275a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001654b  00000000  00000000  00027a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006cc3  00000000  00000000  0003dfe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e8f2  00000000  00000000  00044ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c3598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016c0  00000000  00000000  000c35ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002c08 	.word	0x08002c08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002c08 	.word	0x08002c08

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2uiz>:
 8000e48:	0042      	lsls	r2, r0, #1
 8000e4a:	d20e      	bcs.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e50:	d30b      	bcc.n	8000e6a <__aeabi_f2uiz+0x22>
 8000e52:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d409      	bmi.n	8000e70 <__aeabi_f2uiz+0x28>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e64:	fa23 f002 	lsr.w	r0, r3, r2
 8000e68:	4770      	bx	lr
 8000e6a:	f04f 0000 	mov.w	r0, #0
 8000e6e:	4770      	bx	lr
 8000e70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e74:	d101      	bne.n	8000e7a <__aeabi_f2uiz+0x32>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d102      	bne.n	8000e80 <__aeabi_f2uiz+0x38>
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7e:	4770      	bx	lr
 8000e80:	f04f 0000 	mov.w	r0, #0
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <spi_write>:
 *
 * @param data Pointer to transmit buffer
 * @param len  Amount of bytest to send
 */
void spi_write(uint8_t *data, uint8_t len)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
 8000e98:	e040      	b.n	8000f1c <spi_write+0x94>
    {
        for (int8_t i = 7; i >= 0; i--)
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	73bb      	strb	r3, [r7, #14]
 8000e9e:	e036      	b.n	8000f0e <spi_write+0x86>
        {
            HAL_GPIO_WritePin(gpio->MOSI_PORT, gpio->MOSI_PIN, (data[x] & (1 << i)));
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <spi_write+0xa8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6918      	ldr	r0, [r3, #16]
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <spi_write+0xa8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	8a99      	ldrh	r1, [r3, #20]
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	b25a      	sxtb	r2, r3
 8000eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000eba:	2401      	movs	r4, #1
 8000ebc:	fa04 f303 	lsl.w	r3, r4, r3
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f001 fa58 	bl	800237e <HAL_GPIO_WritePin>
            DELAY(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 fd74 	bl	80019bc <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <spi_write+0xa8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6898      	ldr	r0, [r3, #8]
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <spi_write+0xa8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	899b      	ldrh	r3, [r3, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f001 fa4b 	bl	800237e <HAL_GPIO_WritePin>
            DELAY(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fd67 	bl	80019bc <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 0);
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <spi_write+0xa8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6898      	ldr	r0, [r3, #8]
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <spi_write+0xa8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	899b      	ldrh	r3, [r3, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	f001 fa3e 	bl	800237e <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 8000f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	73bb      	strb	r3, [r7, #14]
 8000f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dac4      	bge.n	8000ea0 <spi_write+0x18>
    for (uint8_t x = 0; x < len; x++)
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	73fb      	strb	r3, [r7, #15]
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	78fb      	ldrb	r3, [r7, #3]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d3ba      	bcc.n	8000e9a <spi_write+0x12>
        }
    }

}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000002c 	.word	0x2000002c

08000f34 <spi_read>:
 *
 * @param buffer Pointer to rx buffer
 * @param len Amount of bytes to receive
 */
void spi_read(uint8_t *buffer, uint8_t len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
    for (uint8_t x = 0; x < len; x++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e04e      	b.n	8000fe4 <spi_read+0xb0>
    {
        buffer[x] = 0;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

        for (int8_t i = 7; i >= 0; i--)
 8000f50:	2307      	movs	r3, #7
 8000f52:	73bb      	strb	r3, [r7, #14]
 8000f54:	e03f      	b.n	8000fd6 <spi_read+0xa2>
        {
            buffer[x] <<= 1;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781a      	ldrb	r2, [r3, #0]
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	440b      	add	r3, r1
 8000f64:	0052      	lsls	r2, r2, #1
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <spi_read+0xc4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6898      	ldr	r0, [r3, #8]
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <spi_read+0xc4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	899b      	ldrh	r3, [r3, #12]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f001 fa00 	bl	800237e <HAL_GPIO_WritePin>
            DELAY(1);
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f000 fd1c 	bl	80019bc <HAL_Delay>
            buffer[x] |= HAL_GPIO_ReadPin(gpio->MISO_PORT, gpio->MISO_PIN);
 8000f84:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <spi_read+0xc4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	699a      	ldr	r2, [r3, #24]
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <spi_read+0xc4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	8b9b      	ldrh	r3, [r3, #28]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4610      	mov	r0, r2
 8000f94:	f001 f9dc 	bl	8002350 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	440b      	add	r3, r1
 8000faa:	4302      	orrs	r2, r0
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
            DELAY(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f000 fd03 	bl	80019bc <HAL_Delay>
            HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 0);
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <spi_read+0xc4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6898      	ldr	r0, [r3, #8]
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <spi_read+0xc4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	899b      	ldrh	r3, [r3, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f001 f9da 	bl	800237e <HAL_GPIO_WritePin>
        for (int8_t i = 7; i >= 0; i--)
 8000fca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	73bb      	strb	r3, [r7, #14]
 8000fd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	dabb      	bge.n	8000f56 <spi_read+0x22>
    for (uint8_t x = 0; x < len; x++)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3ac      	bcc.n	8000f46 <spi_read+0x12>
        }
    }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000002c 	.word	0x2000002c

08000ffc <MAX31865_read>:
 * @param addr      Register addr to read from
 * @param buffer    Pointer to rx buffer
 * @param len       Amount of bytes to read
 */
void MAX31865_read(uint8_t addr, uint8_t *buffer, uint8_t len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	6039      	str	r1, [r7, #0]
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
    addr &= ~MAX31865_READ;                                     // Force read bit on address
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 0);          // Enable CE
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MAX31865_read+0x58>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MAX31865_read+0x58>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	4619      	mov	r1, r3
 8001020:	f001 f9ad 	bl	800237e <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                        // Write addr
 8001024:	1dfb      	adds	r3, r7, #7
 8001026:	2101      	movs	r1, #1
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff2d 	bl	8000e88 <spi_write>
    spi_read(buffer, len);                                      // Read data
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	4619      	mov	r1, r3
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f7ff ff7e 	bl	8000f34 <spi_read>

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);          // Disable CE
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MAX31865_read+0x58>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <MAX31865_read+0x58>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	889b      	ldrh	r3, [r3, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	f001 f999 	bl	800237e <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000002c 	.word	0x2000002c

08001058 <MAX31865_write>:
 *
 * @param addr      Register addr to write to
 * @param buffer    Tx data
 */
void MAX31865_write(uint8_t addr, uint8_t data)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
    addr |= MAX31865_WRITE;                                 // Force write bit on address
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800106e:	b2db      	uxtb	r3, r3
 8001070:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 0);      // Enable CE
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MAX31865_write+0x60>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6818      	ldr	r0, [r3, #0]
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <MAX31865_write+0x60>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	889b      	ldrh	r3, [r3, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	f001 f97c 	bl	800237e <HAL_GPIO_WritePin>

    spi_write(&addr, 1);                                    // Write addr
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	2101      	movs	r1, #1
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fefc 	bl	8000e88 <spi_write>
    spi_write(&data, 1);                                    // Write data
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	2101      	movs	r1, #1
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fef7 	bl	8000e88 <spi_write>

    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);      // Disable CE
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <MAX31865_write+0x60>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <MAX31865_write+0x60>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	889b      	ldrh	r3, [r3, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	f001 f968 	bl	800237e <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000002c 	.word	0x2000002c

080010bc <enableBias>:
/**
 * Enable of disable MAX831865 bias voltage
 * @param enable Enable of disable
 */
void enableBias(uint8_t enable)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff94 	bl	8000ffc <MAX31865_read>

    if (enable)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d005      	beq.n	80010e6 <enableBias+0x2a>
    {
        status |= MAX31856_CONFIG_BIAS;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
 80010dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e004      	b.n	80010f0 <enableBias+0x34>
    } else
    {
        status &= ~MAX31856_CONFIG_BIAS;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4619      	mov	r1, r3
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ffaf 	bl	8001058 <MAX31865_write>
}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <autoConvert>:
/**
 * Enable of disable MAX831865 auto convert
 * @param enable Enable of disable
 */
void autoConvert(uint8_t enable)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b084      	sub	sp, #16
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 800110c:	f107 030f 	add.w	r3, r7, #15
 8001110:	2201      	movs	r2, #1
 8001112:	4619      	mov	r1, r3
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff71 	bl	8000ffc <MAX31865_read>

    if (enable)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <autoConvert+0x2a>
    {
        status |= MAX31856_CONFIG_MODEAUTO;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73fb      	strb	r3, [r7, #15]
 800112a:	e004      	b.n	8001136 <autoConvert+0x34>
    } else
    {
        status &= ~MAX31856_CONFIG_MODEAUTO;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001132:	b2db      	uxtb	r3, r3
 8001134:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	4619      	mov	r1, r3
 800113a:	2000      	movs	r0, #0
 800113c:	f7ff ff8c 	bl	8001058 <MAX31865_write>
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <setWires>:
/**
 * Set the amount of wires the temperature sensor uses
 * @param numwires 2,3 or 4 wires
 */
void setWires(uint8_t numwires)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 8001152:	f107 030f 	add.w	r3, r7, #15
 8001156:	2201      	movs	r2, #1
 8001158:	4619      	mov	r1, r3
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ff4e 	bl	8000ffc <MAX31865_read>

    if (numwires == 3) // 3-wire
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d105      	bne.n	8001172 <setWires+0x2a>
    {
        status |= MAX31856_CONFIG_3WIRE;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	b2db      	uxtb	r3, r3
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e004      	b.n	800117c <setWires+0x34>
    } else // 2-4 wire
    {
        status &= ~MAX31856_CONFIG_3WIRE;
 8001172:	7bfb      	ldrb	r3, [r7, #15]
 8001174:	f023 0310 	bic.w	r3, r3, #16
 8001178:	b2db      	uxtb	r3, r3
 800117a:	73fb      	strb	r3, [r7, #15]
    }

    MAX31865_write(MAX31856_CONFIG_REG, status);
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	4619      	mov	r1, r3
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff ff69 	bl	8001058 <MAX31865_write>
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <single_shot>:

/**
 * Perform a single shot conversion
 */
void single_shot(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
    uint8_t status;

    // Read config register
    MAX31865_read(MAX31856_CONFIG_REG, &status, 1);
 8001194:	1dfb      	adds	r3, r7, #7
 8001196:	2201      	movs	r2, #1
 8001198:	4619      	mov	r1, r3
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ff2e 	bl	8000ffc <MAX31865_read>

    // Enable 1shot bit, and write back
    status |= MAX31856_CONFIG_1SHOT;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f043 0320 	orr.w	r3, r3, #32
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	71fb      	strb	r3, [r7, #7]
    MAX31865_write(MAX31856_CONFIG_REG, status);
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4619      	mov	r1, r3
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ff52 	bl	8001058 <MAX31865_write>

}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <MAX31865_init>:
 *
 * @param max_gpio  MAX31865_GPIO structure with pinout
 * @param wires     Amount of wires on the temperature probe (2,3 or 4)
 */
void MAX31865_init(MAX31865_GPIO *max_gpio, uint8_t wires)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
    gpio = max_gpio;
 80011c8:	4a17      	ldr	r2, [pc, #92]	; (8001228 <MAX31865_init+0x6c>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]

    // Datalines in reset state
    HAL_GPIO_WritePin(gpio->CE_PORT, gpio->CE_PIN, 1);
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MAX31865_init+0x6c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MAX31865_init+0x6c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	889b      	ldrh	r3, [r3, #4]
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	f001 f8ce 	bl	800237e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio->CLK_PORT, gpio->CLK_PIN, 1);
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MAX31865_init+0x6c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6898      	ldr	r0, [r3, #8]
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MAX31865_init+0x6c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	899b      	ldrh	r3, [r3, #12]
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f001 f8c4 	bl	800237e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(gpio->MOSI_PORT, gpio->MOSI_PIN, 1);
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MAX31865_init+0x6c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6918      	ldr	r0, [r3, #16]
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <MAX31865_init+0x6c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	8a9b      	ldrh	r3, [r3, #20]
 8001202:	2201      	movs	r2, #1
 8001204:	4619      	mov	r1, r3
 8001206:	f001 f8ba 	bl	800237e <HAL_GPIO_WritePin>

    setWires(wires);           // Set 2,3 or 4 wire sensor
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff9b 	bl	8001148 <setWires>
    enableBias(OFF);           // Disable bias voltage
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff ff52 	bl	80010bc <enableBias>
    autoConvert(OFF);          // Disable auto conversion
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff ff72 	bl	8001102 <autoConvert>
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000002c 	.word	0x2000002c
 800122c:	00000000 	.word	0x00000000

08001230 <MAX31865_readTemp>:
 * Perform a single temperature conversion, and calculate the value
 *
 * @return  Temperature as float
 */
float MAX31865_readTemp()
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
    // Activate bias voltage to read sensor data, and wait for the capacitors to fill
    enableBias(ON);
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff ff40 	bl	80010bc <enableBias>
    HAL_Delay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f000 fbbd 	bl	80019bc <HAL_Delay>

    // Perform a single conversion, and wait for the result
    single_shot();
 8001242:	f7ff ffa4 	bl	800118e <single_shot>
    HAL_Delay(65);
 8001246:	2041      	movs	r0, #65	; 0x41
 8001248:	f000 fbb8 	bl	80019bc <HAL_Delay>

    // Read data from max31865 data registers
    uint8_t buffer[2];
    MAX31865_read(MAX31856_RTDMSB_REG, buffer, 2);
 800124c:	463b      	mov	r3, r7
 800124e:	2202      	movs	r2, #2
 8001250:	4619      	mov	r1, r3
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fed2 	bl	8000ffc <MAX31865_read>

    // Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
    uint16_t data = buffer[0] << 8;
 8001258:	783b      	ldrb	r3, [r7, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	81fb      	strh	r3, [r7, #14]
    data |= buffer[1];
 8001260:	787b      	ldrb	r3, [r7, #1]
 8001262:	b29a      	uxth	r2, r3
 8001264:	89fb      	ldrh	r3, [r7, #14]
 8001266:	4313      	orrs	r3, r2
 8001268:	81fb      	strh	r3, [r7, #14]
    data >>= 1;
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	085b      	lsrs	r3, r3, #1
 800126e:	81fb      	strh	r3, [r7, #14]

    // Calculate the actual resistance of the sensor
    float resistance = ((float) data * RREF) / FACTOR;
 8001270:	89fb      	ldrh	r3, [r7, #14]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fc40 	bl	8000af8 <__aeabi_ui2f>
 8001278:	4603      	mov	r3, r0
 800127a:	4919      	ldr	r1, [pc, #100]	; (80012e0 <MAX31865_readTemp+0xb0>)
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fc93 	bl	8000ba8 <__aeabi_fmul>
 8001282:	4603      	mov	r3, r0
 8001284:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd41 	bl	8000d10 <__aeabi_fdiv>
 800128e:	4603      	mov	r3, r0
 8001290:	60bb      	str	r3, [r7, #8]

    // Calculate the temperature from the measured resistance
    float temp = ((resistance / 100) - 1) / ALPHA;
 8001292:	4914      	ldr	r1, [pc, #80]	; (80012e4 <MAX31865_readTemp+0xb4>)
 8001294:	68b8      	ldr	r0, [r7, #8]
 8001296:	f7ff fd3b 	bl	8000d10 <__aeabi_fdiv>
 800129a:	4603      	mov	r3, r0
 800129c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fb77 	bl	8000994 <__aeabi_fsub>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8b5 	bl	8000418 <__aeabi_f2d>
 80012ae:	a30a      	add	r3, pc, #40	; (adr r3, 80012d8 <MAX31865_readTemp+0xa8>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff fa32 	bl	800071c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fb14 	bl	80008ec <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	607b      	str	r3, [r7, #4]

    // Disable bias voltage to reduce power usage
    enableBias(OFF);
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff fef7 	bl	80010bc <enableBias>

    return temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	e1d2178f 	.word	0xe1d2178f
 80012dc:	3f6f8c21 	.word	0x3f6f8c21
 80012e0:	43d70000 	.word	0x43d70000
 80012e4:	42c80000 	.word	0x42c80000

080012e8 <CAN_Transmit>:

/* USER CODE BEGIN 0 */


void CAN_Transmit(uint16_t temp[4])
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	TxHeader.StdId = 0x6E;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <CAN_Transmit+0x40>)
 80012f2:	226e      	movs	r2, #110	; 0x6e
 80012f4:	601a      	str	r2, [r3, #0]
	temp[3] = _temp_ok;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3306      	adds	r3, #6
 80012fa:	4a0c      	ldr	r2, [pc, #48]	; (800132c <CAN_Transmit+0x44>)
 80012fc:	8812      	ldrh	r2, [r2, #0]
 80012fe:	801a      	strh	r2, [r3, #0]
	if(HAL_CAN_AddTxMessage(&hcan, &TxHeader, temp, &TxMailbox) == HAL_OK)
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <CAN_Transmit+0x48>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	4908      	ldr	r1, [pc, #32]	; (8001328 <CAN_Transmit+0x40>)
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <CAN_Transmit+0x4c>)
 8001308:	f000 fcbb 	bl	8001c82 <HAL_CAN_AddTxMessage>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d103      	bne.n	800131a <CAN_Transmit+0x32>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001312:	2101      	movs	r1, #1
 8001314:	4808      	ldr	r0, [pc, #32]	; (8001338 <CAN_Transmit+0x50>)
 8001316:	f001 f84a 	bl	80023ae <HAL_GPIO_TogglePin>
	HAL_Delay(20);
 800131a:	2014      	movs	r0, #20
 800131c:	f000 fb4e 	bl	80019bc <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000bc 	.word	0x200000bc
 800132c:	20000028 	.word	0x20000028
 8001330:	200000b0 	.word	0x200000b0
 8001334:	20000068 	.word	0x20000068
 8001338:	40010800 	.word	0x40010800

0800133c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001342:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <MX_CAN_Init+0xa8>)
 8001344:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001348:	2209      	movs	r2, #9
 800134a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_CAN_Init+0xa4>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_CAN_Init+0xa4>)
 800135a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800135e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001368:	2200      	movs	r2, #0
 800136a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_CAN_Init+0xa4>)
 800136e:	2200      	movs	r2, #0
 8001370:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001372:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001374:	2200      	movs	r2, #0
 8001376:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_CAN_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <MX_CAN_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800138a:	4815      	ldr	r0, [pc, #84]	; (80013e0 <MX_CAN_Init+0xa4>)
 800138c:	f000 fb3a 	bl	8001a04 <HAL_CAN_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001396:	f000 fa24 	bl	80017e2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800139a:	4811      	ldr	r0, [pc, #68]	; (80013e0 <MX_CAN_Init+0xa4>)
 800139c:	f000 fc2d 	bl	8001bfa <HAL_CAN_Start>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_CAN_Init+0x6e>
  {
	  /* Start Error */
	  Error_Handler();
 80013a6:	f000 fa1c 	bl	80017e2 <Error_Handler>
  }
  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80013aa:	2103      	movs	r1, #3
 80013ac:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_CAN_Init+0xa4>)
 80013ae:	f000 fd42 	bl	8001e36 <HAL_CAN_ActivateNotification>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_CAN_Init+0x80>
  {
	  /* Notification Error */
	  Error_Handler();
 80013b8:	f000 fa13 	bl	80017e2 <Error_Handler>
  }
  TxHeader.ExtId = 0x01;
 80013bc:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <MX_CAN_Init+0xac>)
 80013be:	2201      	movs	r2, #1
 80013c0:	605a      	str	r2, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <MX_CAN_Init+0xac>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80013c8:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <MX_CAN_Init+0xac>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <MX_CAN_Init+0xac>)
 80013d0:	2208      	movs	r2, #8
 80013d2:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <MX_CAN_Init+0xac>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000068 	.word	0x20000068
 80013e4:	40006400 	.word	0x40006400
 80013e8:	200000bc 	.word	0x200000bc

080013ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_CAN_MspInit+0x8c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d131      	bne.n	8001470 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_CAN_MspInit+0x90>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_CAN_MspInit+0x90>)
 8001412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001416:	61d3      	str	r3, [r2, #28]
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_CAN_MspInit+0x90>)
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_CAN_MspInit+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_CAN_MspInit+0x90>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_CAN_MspInit+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800143c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_CAN_MspInit+0x94>)
 8001452:	f000 fdf9 	bl	8002048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_CAN_MspInit+0x94>)
 800146c:	f000 fdec 	bl	8002048 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40006400 	.word	0x40006400
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0310 	add.w	r3, r7, #16
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001498:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <MX_GPIO_Init+0x12c>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <MX_GPIO_Init+0x12c>)
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a3e      	ldr	r2, [pc, #248]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b3c      	ldr	r3, [pc, #240]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	6193      	str	r3, [r2, #24]
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <MX_GPIO_Init+0x12c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	482d      	ldr	r0, [pc, #180]	; (80015b4 <MX_GPIO_Init+0x130>)
 8001500:	f000 ff3d 	bl	800237e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_DEBUG_Pin|SS3_Pin|SS2_Pin|CLK_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	f240 11b9 	movw	r1, #441	; 0x1b9
 800150a:	482b      	ldr	r0, [pc, #172]	; (80015b8 <MX_GPIO_Init+0x134>)
 800150c:	f000 ff37 	bl	800237e <HAL_GPIO_WritePin>
                          |MOSI_Pin|CD_SD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SS1_Pin|CS_SD_Pin|CLK_SD_Pin|MOSI_SD_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f247 0101 	movw	r1, #28673	; 0x7001
 8001516:	4829      	ldr	r0, [pc, #164]	; (80015bc <MX_GPIO_Init+0x138>)
 8001518:	f000 ff31 	bl	800237e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2302      	movs	r3, #2
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	481f      	ldr	r0, [pc, #124]	; (80015b4 <MX_GPIO_Init+0x130>)
 8001536:	f000 fd87 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|SS3_Pin|SS2_Pin|CLK_Pin
 800153a:	f240 13b9 	movw	r3, #441	; 0x1b9
 800153e:	613b      	str	r3, [r7, #16]
                          |MOSI_Pin|CD_SD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	2301      	movs	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2302      	movs	r3, #2
 800154a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4819      	ldr	r0, [pc, #100]	; (80015b8 <MX_GPIO_Init+0x134>)
 8001554:	f000 fd78 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	4813      	ldr	r0, [pc, #76]	; (80015b8 <MX_GPIO_Init+0x134>)
 800156c:	f000 fd6c 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SS1_Pin|CS_SD_Pin|CLK_SD_Pin|MOSI_SD_Pin;
 8001570:	f247 0301 	movw	r3, #28673	; 0x7001
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2302      	movs	r3, #2
 8001580:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	4619      	mov	r1, r3
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <MX_GPIO_Init+0x138>)
 800158a:	f000 fd5d 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MISO_SD_Pin;
 800158e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001592:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_SD_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <MX_GPIO_Init+0x138>)
 80015a4:	f000 fd50 	bl	8002048 <HAL_GPIO_Init>

}
 80015a8:	bf00      	nop
 80015aa:	3720      	adds	r7, #32
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40010800 	.word	0x40010800
 80015bc:	40010c00 	.word	0x40010c00

080015c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09a      	sub	sp, #104	; 0x68
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 f997 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f8c5 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f7ff ff59 	bl	8001484 <MX_GPIO_Init>
  MX_CAN_Init();
 80015d2:	f7ff feb3 	bl	800133c <MX_CAN_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MAX31865_GPIO max_gpio_1;
  	max_gpio_1.MISO_PIN = MISO_Pin; //SDO
 80015d6:	2340      	movs	r3, #64	; 0x40
 80015d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  	max_gpio_1.MISO_PORT = MISO_GPIO_Port;
 80015dc:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <main+0x188>)
 80015de:	663b      	str	r3, [r7, #96]	; 0x60
  	max_gpio_1.MOSI_PIN = MOSI_Pin; //SDI
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  	max_gpio_1.MOSI_PORT = MOSI_GPIO_Port;
 80015e6:	4b58      	ldr	r3, [pc, #352]	; (8001748 <main+0x188>)
 80015e8:	65bb      	str	r3, [r7, #88]	; 0x58
  	max_gpio_1.CLK_PIN = CLK_Pin;
 80015ea:	2320      	movs	r3, #32
 80015ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  	max_gpio_1.CLK_PORT = CLK_GPIO_Port;
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <main+0x188>)
 80015f2:	653b      	str	r3, [r7, #80]	; 0x50
  	max_gpio_1.CE_PIN = SS1_Pin; //CS
 80015f4:	2301      	movs	r3, #1
 80015f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  	max_gpio_1.CE_PORT = SS1_GPIO_Port;
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <main+0x18c>)
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48


  	MAX31865_GPIO max_gpio_2;
  	max_gpio_2.MISO_PIN = MISO_Pin;
 80015fe:	2340      	movs	r3, #64	; 0x40
 8001600:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  	max_gpio_2.MISO_PORT = MISO_GPIO_Port;
 8001604:	4b50      	ldr	r3, [pc, #320]	; (8001748 <main+0x188>)
 8001606:	643b      	str	r3, [r7, #64]	; 0x40
  	max_gpio_2.MOSI_PIN = MOSI_Pin;
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  	max_gpio_2.MOSI_PORT = MOSI_GPIO_Port;
 800160c:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <main+0x188>)
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  	max_gpio_2.CLK_PIN = CLK_Pin;
 8001610:	2320      	movs	r3, #32
 8001612:	86bb      	strh	r3, [r7, #52]	; 0x34
  	max_gpio_2.CLK_PORT = CLK_GPIO_Port;
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <main+0x188>)
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  	max_gpio_2.CE_PIN = SS2_Pin;
 8001618:	2310      	movs	r3, #16
 800161a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  	max_gpio_2.CE_PORT = SS2_GPIO_Port;
 800161c:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <main+0x188>)
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28

  	MAX31865_GPIO max_gpio_3;
  	max_gpio_3.MISO_PIN = MISO_Pin;
 8001620:	2340      	movs	r3, #64	; 0x40
 8001622:	84bb      	strh	r3, [r7, #36]	; 0x24
  	max_gpio_3.MISO_PORT = MISO_GPIO_Port;
 8001624:	4b48      	ldr	r3, [pc, #288]	; (8001748 <main+0x188>)
 8001626:	623b      	str	r3, [r7, #32]
  	max_gpio_3.MOSI_PIN = MOSI_Pin;
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	83bb      	strh	r3, [r7, #28]
  	max_gpio_3.MOSI_PORT = MOSI_GPIO_Port;
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <main+0x188>)
 800162e:	61bb      	str	r3, [r7, #24]
  	max_gpio_3.CLK_PIN = CLK_Pin;
 8001630:	2320      	movs	r3, #32
 8001632:	82bb      	strh	r3, [r7, #20]
  	max_gpio_3.CLK_PORT = CLK_GPIO_Port;
 8001634:	4b44      	ldr	r3, [pc, #272]	; (8001748 <main+0x188>)
 8001636:	613b      	str	r3, [r7, #16]
  	max_gpio_3.CE_PIN = SS3_Pin;
 8001638:	2308      	movs	r3, #8
 800163a:	81bb      	strh	r3, [r7, #12]
  	max_gpio_3.CE_PORT = SS3_GPIO_Port;
 800163c:	4b42      	ldr	r3, [pc, #264]	; (8001748 <main+0x188>)
 800163e:	60bb      	str	r3, [r7, #8]
  	uint16_t temp[4];

    while (1)
    {
  		//Inicializa os m�dulos, l� temperatura
  			MAX31865_init(&max_gpio_1, 2);
 8001640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001644:	2102      	movs	r1, #2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fdb8 	bl	80011bc <MAX31865_init>

  			temp[0] = 10*MAX31865_readTemp();
 800164c:	f7ff fdf0 	bl	8001230 <MAX31865_readTemp>
 8001650:	4603      	mov	r3, r0
 8001652:	493f      	ldr	r1, [pc, #252]	; (8001750 <main+0x190>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff faa7 	bl	8000ba8 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fbf3 	bl	8000e48 <__aeabi_f2uiz>
 8001662:	4603      	mov	r3, r0
 8001664:	b29b      	uxth	r3, r3
 8001666:	803b      	strh	r3, [r7, #0]

  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2101      	movs	r1, #1
 800166c:	4836      	ldr	r0, [pc, #216]	; (8001748 <main+0x188>)
 800166e:	f000 fe86 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(200);
 8001672:	20c8      	movs	r0, #200	; 0xc8
 8001674:	f000 f9a2 	bl	80019bc <HAL_Delay>
  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	2101      	movs	r1, #1
 800167c:	4832      	ldr	r0, [pc, #200]	; (8001748 <main+0x188>)
 800167e:	f000 fe7e 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 8001682:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001686:	f000 f999 	bl	80019bc <HAL_Delay>

  			MAX31865_init(&max_gpio_2, 2);
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	2102      	movs	r1, #2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd93 	bl	80011bc <MAX31865_init>

  			temp[1] = 10*MAX31865_readTemp();
 8001696:	f7ff fdcb 	bl	8001230 <MAX31865_readTemp>
 800169a:	4603      	mov	r3, r0
 800169c:	492c      	ldr	r1, [pc, #176]	; (8001750 <main+0x190>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fa82 	bl	8000ba8 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fbce 	bl	8000e48 <__aeabi_f2uiz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	807b      	strh	r3, [r7, #2]

  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_SET);
 80016b2:	2201      	movs	r2, #1
 80016b4:	2101      	movs	r1, #1
 80016b6:	4824      	ldr	r0, [pc, #144]	; (8001748 <main+0x188>)
 80016b8:	f000 fe61 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(200);
 80016bc:	20c8      	movs	r0, #200	; 0xc8
 80016be:	f000 f97d 	bl	80019bc <HAL_Delay>
  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2101      	movs	r1, #1
 80016c6:	4820      	ldr	r0, [pc, #128]	; (8001748 <main+0x188>)
 80016c8:	f000 fe59 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 80016cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016d0:	f000 f974 	bl	80019bc <HAL_Delay>

  			MAX31865_init(&max_gpio_3, 2);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	2102      	movs	r1, #2
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fd6e 	bl	80011bc <MAX31865_init>

  			temp[2] = 10*MAX31865_readTemp();
 80016e0:	f7ff fda6 	bl	8001230 <MAX31865_readTemp>
 80016e4:	4603      	mov	r3, r0
 80016e6:	491a      	ldr	r1, [pc, #104]	; (8001750 <main+0x190>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fa5d 	bl	8000ba8 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fba9 	bl	8000e48 <__aeabi_f2uiz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	80bb      	strh	r3, [r7, #4]

  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2101      	movs	r1, #1
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <main+0x188>)
 8001702:	f000 fe3c 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(200);
 8001706:	20c8      	movs	r0, #200	; 0xc8
 8001708:	f000 f958 	bl	80019bc <HAL_Delay>
  			HAL_GPIO_WritePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin, GPIO_PIN_RESET);
 800170c:	2200      	movs	r2, #0
 800170e:	2101      	movs	r1, #1
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <main+0x188>)
 8001712:	f000 fe34 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(300);
 8001716:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800171a:	f000 f94f 	bl	80019bc <HAL_Delay>

  			//envia as vari�veis por can

  			CAN_Transmit(temp);
 800171e:	463b      	mov	r3, r7
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fde1 	bl	80012e8 <CAN_Transmit>
  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <main+0x194>)
 800172e:	f000 fe26 	bl	800237e <HAL_GPIO_WritePin>
  			HAL_Delay(50);
 8001732:	2032      	movs	r0, #50	; 0x32
 8001734:	f000 f942 	bl	80019bc <HAL_Delay>
  			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <main+0x194>)
 8001740:	f000 fe1d 	bl	800237e <HAL_GPIO_WritePin>
    {
 8001744:	e77c      	b.n	8001640 <main+0x80>
 8001746:	bf00      	nop
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	41200000 	.word	0x41200000
 8001754:	40011000 	.word	0x40011000

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b090      	sub	sp, #64	; 0x40
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	2228      	movs	r2, #40	; 0x28
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f001 fa46 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178c:	2302      	movs	r3, #2
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001796:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 fe1d 	bl	80023e0 <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017ac:	f000 f819 	bl	80017e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b0:	230f      	movs	r3, #15
 80017b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	2302      	movs	r3, #2
 80017b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2102      	movs	r1, #2
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 f888 	bl	80028e0 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017d6:	f000 f804 	bl	80017e2 <Error_Handler>
  }
}
 80017da:	bf00      	nop
 80017dc:	3740      	adds	r7, #64	; 0x40
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e6:	b672      	cpsid	i
}
 80017e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ea:	e7fe      	b.n	80017ea <Error_Handler+0x8>

080017ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017f2:	4b15      	ldr	r3, [pc, #84]	; (8001848 <HAL_MspInit+0x5c>)
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	4a14      	ldr	r2, [pc, #80]	; (8001848 <HAL_MspInit+0x5c>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6193      	str	r3, [r2, #24]
 80017fe:	4b12      	ldr	r3, [pc, #72]	; (8001848 <HAL_MspInit+0x5c>)
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x5c>)
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_MspInit+0x5c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	61d3      	str	r3, [r2, #28]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x5c>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_MspInit+0x60>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_MspInit+0x60>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40021000 	.word	0x40021000
 800184c:	40010000 	.word	0x40010000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 f875 	bl	8001984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}

0800189e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
	...

080018ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	; (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	; (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	; (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018d2:	f7ff ffe4 	bl	800189e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f001 f96b 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018da:	f7ff fe71 	bl	80015c0 <main>
  bx lr
 80018de:	4770      	bx	lr
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018e8:	08002c48 	.word	0x08002c48
  ldr r2, =_sbss
 80018ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018f0:	200000f4 	.word	0x200000f4

080018f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_2_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <HAL_Init+0x28>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a07      	ldr	r2, [pc, #28]	; (8001920 <HAL_Init+0x28>)
 8001902:	f043 0310 	orr.w	r3, r3, #16
 8001906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 fb69 	bl	8001fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f808 	bl	8001924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001914:	f7ff ff6a 	bl	80017ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800192c:	4b12      	ldr	r3, [pc, #72]	; (8001978 <HAL_InitTick+0x54>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x58>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193a:	fbb3 f3f1 	udiv	r3, r3, r1
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fb73 	bl	800202e <HAL_SYSTICK_Config>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e00e      	b.n	8001970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b0f      	cmp	r3, #15
 8001956:	d80a      	bhi.n	800196e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001958:	2200      	movs	r2, #0
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001960:	f000 fb49 	bl	8001ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_InitTick+0x5c>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000000 	.word	0x20000000
 800197c:	20000008 	.word	0x20000008
 8001980:	20000004 	.word	0x20000004

08001984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_IncTick+0x1c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x20>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4413      	add	r3, r2
 8001994:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <HAL_IncTick+0x20>)
 8001996:	6013      	str	r3, [r2, #0]
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	20000008 	.word	0x20000008
 80019a4:	200000f0 	.word	0x200000f0

080019a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return uwTick;
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_GetTick+0x10>)
 80019ae:	681b      	ldr	r3, [r3, #0]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	200000f0 	.word	0x200000f0

080019bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c4:	f7ff fff0 	bl	80019a8 <HAL_GetTick>
 80019c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d4:	d005      	beq.n	80019e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_Delay+0x44>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e2:	bf00      	nop
 80019e4:	f7ff ffe0 	bl	80019a8 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d8f7      	bhi.n	80019e4 <HAL_Delay+0x28>
  {
  }
}
 80019f4:	bf00      	nop
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000008 	.word	0x20000008

08001a04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0ed      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d102      	bne.n	8001a28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fce2 	bl	80013ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a38:	f7ff ffb6 	bl	80019a8 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a3e:	e012      	b.n	8001a66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a40:	f7ff ffb2 	bl	80019a8 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b0a      	cmp	r3, #10
 8001a4c:	d90b      	bls.n	8001a66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e0c5      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0e5      	beq.n	8001a40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0202 	bic.w	r2, r2, #2
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a84:	f7ff ff90 	bl	80019a8 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a8a:	e012      	b.n	8001ab2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a8c:	f7ff ff8c 	bl	80019a8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b0a      	cmp	r3, #10
 8001a98:	d90b      	bls.n	8001ab2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e09f      	b.n	8001bf2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1e5      	bne.n	8001a8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d108      	bne.n	8001ada <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	7e5b      	ldrb	r3, [r3, #25]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d108      	bne.n	8001b04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e007      	b.n	8001b14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e9b      	ldrb	r3, [r3, #26]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d108      	bne.n	8001b2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	e007      	b.n	8001b3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7edb      	ldrb	r3, [r3, #27]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d108      	bne.n	8001b58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0210 	bic.w	r2, r2, #16
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e007      	b.n	8001b68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0210 	orr.w	r2, r2, #16
 8001b66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7f1b      	ldrb	r3, [r3, #28]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d108      	bne.n	8001b82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0208 	orr.w	r2, r2, #8
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	e007      	b.n	8001b92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7f5b      	ldrb	r3, [r3, #29]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0204 	orr.w	r2, r2, #4
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e007      	b.n	8001bbc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f022 0204 	bic.w	r2, r2, #4
 8001bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	ea42 0103 	orr.w	r1, r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d12e      	bne.n	8001c6c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c26:	f7ff febf 	bl	80019a8 <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c2c:	e012      	b.n	8001c54 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c2e:	f7ff febb 	bl	80019a8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b0a      	cmp	r3, #10
 8001c3a:	d90b      	bls.n	8001c54 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2205      	movs	r2, #5
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e012      	b.n	8001c7a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1e5      	bne.n	8001c2e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e006      	b.n	8001c7a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b089      	sub	sp, #36	; 0x24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d003      	beq.n	8001cae <HAL_CAN_AddTxMessage+0x2c>
 8001ca6:	7ffb      	ldrb	r3, [r7, #31]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	f040 80b8 	bne.w	8001e1e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10a      	bne.n	8001cce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80a0 	beq.w	8001e0e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	0e1b      	lsrs	r3, r3, #24
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d907      	bls.n	8001cee <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e09e      	b.n	8001e2c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d10d      	bne.n	8001d1c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d0a:	68f9      	ldr	r1, [r7, #12]
 8001d0c:	6809      	ldr	r1, [r1, #0]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3318      	adds	r3, #24
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	440b      	add	r3, r1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e00f      	b.n	8001d3c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d26:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d30:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	3318      	adds	r3, #24
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	440b      	add	r3, r1
 8001d3a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3318      	adds	r3, #24
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	7d1b      	ldrb	r3, [r3, #20]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d111      	bne.n	8001d7c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4413      	add	r3, r2
 8001d64:	3304      	adds	r3, #4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	6811      	ldr	r1, [r2, #0]
 8001d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	3318      	adds	r3, #24
 8001d74:	011b      	lsls	r3, r3, #4
 8001d76:	440b      	add	r3, r1
 8001d78:	3304      	adds	r3, #4
 8001d7a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3307      	adds	r3, #7
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	061a      	lsls	r2, r3, #24
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3306      	adds	r3, #6
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	041b      	lsls	r3, r3, #16
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3305      	adds	r3, #5
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	4313      	orrs	r3, r2
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	3204      	adds	r2, #4
 8001d9c:	7812      	ldrb	r2, [r2, #0]
 8001d9e:	4610      	mov	r0, r2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	6811      	ldr	r1, [r2, #0]
 8001da4:	ea43 0200 	orr.w	r2, r3, r0
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	440b      	add	r3, r1
 8001dae:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001db2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3303      	adds	r3, #3
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	061a      	lsls	r2, r3, #24
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	6811      	ldr	r1, [r2, #0]
 8001dda:	ea43 0200 	orr.w	r2, r3, r0
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	011b      	lsls	r3, r3, #4
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001de8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3318      	adds	r3, #24
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	f043 0201 	orr.w	r2, r3, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3318      	adds	r3, #24
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	440b      	add	r3, r1
 8001e08:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e00e      	b.n	8001e2c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e006      	b.n	8001e2c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
  }
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3724      	adds	r7, #36	; 0x24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b085      	sub	sp, #20
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e46:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d002      	beq.n	8001e54 <HAL_CAN_ActivateNotification+0x1e>
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d109      	bne.n	8001e68 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6959      	ldr	r1, [r3, #20]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e006      	b.n	8001e76 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	60d3      	str	r3, [r2, #12]
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db0a      	blt.n	8001f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	490c      	ldr	r1, [pc, #48]	; (8001f30 <__NVIC_SetPriority+0x4c>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	0112      	lsls	r2, r2, #4
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	440b      	add	r3, r1
 8001f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f0c:	e00a      	b.n	8001f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4908      	ldr	r1, [pc, #32]	; (8001f34 <__NVIC_SetPriority+0x50>)
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	3b04      	subs	r3, #4
 8001f1c:	0112      	lsls	r2, r2, #4
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	440b      	add	r3, r1
 8001f22:	761a      	strb	r2, [r3, #24]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100
 8001f34:	e000ed00 	.word	0xe000ed00

08001f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b089      	sub	sp, #36	; 0x24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f1c3 0307 	rsb	r3, r3, #7
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	bf28      	it	cs
 8001f56:	2304      	movcs	r3, #4
 8001f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d902      	bls.n	8001f68 <NVIC_EncodePriority+0x30>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3b03      	subs	r3, #3
 8001f66:	e000      	b.n	8001f6a <NVIC_EncodePriority+0x32>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	43d9      	mvns	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f90:	4313      	orrs	r3, r2
         );
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3724      	adds	r7, #36	; 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fac:	d301      	bcc.n	8001fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00f      	b.n	8001fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb2:	4a0a      	ldr	r2, [pc, #40]	; (8001fdc <SysTick_Config+0x40>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fba:	210f      	movs	r1, #15
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fc0:	f7ff ff90 	bl	8001ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc4:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <SysTick_Config+0x40>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <SysTick_Config+0x40>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	e000e010 	.word	0xe000e010

08001fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ff49 	bl	8001e80 <__NVIC_SetPriorityGrouping>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002008:	f7ff ff5e 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800200c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	6978      	ldr	r0, [r7, #20]
 8002014:	f7ff ff90 	bl	8001f38 <NVIC_EncodePriority>
 8002018:	4602      	mov	r2, r0
 800201a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff5f 	bl	8001ee4 <__NVIC_SetPriority>
}
 8002026:	bf00      	nop
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff ffb0 	bl	8001f9c <SysTick_Config>
 800203c:	4603      	mov	r3, r0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002048:	b480      	push	{r7}
 800204a:	b08b      	sub	sp, #44	; 0x2c
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205a:	e169      	b.n	8002330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800205c:	2201      	movs	r2, #1
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	69fa      	ldr	r2, [r7, #28]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 8158 	bne.w	800232a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4a9a      	ldr	r2, [pc, #616]	; (80022e8 <HAL_GPIO_Init+0x2a0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d05e      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
 8002084:	4a98      	ldr	r2, [pc, #608]	; (80022e8 <HAL_GPIO_Init+0x2a0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d875      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 800208a:	4a98      	ldr	r2, [pc, #608]	; (80022ec <HAL_GPIO_Init+0x2a4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d058      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
 8002090:	4a96      	ldr	r2, [pc, #600]	; (80022ec <HAL_GPIO_Init+0x2a4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d86f      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 8002096:	4a96      	ldr	r2, [pc, #600]	; (80022f0 <HAL_GPIO_Init+0x2a8>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d052      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
 800209c:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_GPIO_Init+0x2a8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d869      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 80020a2:	4a94      	ldr	r2, [pc, #592]	; (80022f4 <HAL_GPIO_Init+0x2ac>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d04c      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
 80020a8:	4a92      	ldr	r2, [pc, #584]	; (80022f4 <HAL_GPIO_Init+0x2ac>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d863      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 80020ae:	4a92      	ldr	r2, [pc, #584]	; (80022f8 <HAL_GPIO_Init+0x2b0>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d046      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
 80020b4:	4a90      	ldr	r2, [pc, #576]	; (80022f8 <HAL_GPIO_Init+0x2b0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d85d      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	d82a      	bhi.n	8002114 <HAL_GPIO_Init+0xcc>
 80020be:	2b12      	cmp	r3, #18
 80020c0:	d859      	bhi.n	8002176 <HAL_GPIO_Init+0x12e>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <HAL_GPIO_Init+0x80>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	08002143 	.word	0x08002143
 80020cc:	0800211d 	.word	0x0800211d
 80020d0:	0800212f 	.word	0x0800212f
 80020d4:	08002171 	.word	0x08002171
 80020d8:	08002177 	.word	0x08002177
 80020dc:	08002177 	.word	0x08002177
 80020e0:	08002177 	.word	0x08002177
 80020e4:	08002177 	.word	0x08002177
 80020e8:	08002177 	.word	0x08002177
 80020ec:	08002177 	.word	0x08002177
 80020f0:	08002177 	.word	0x08002177
 80020f4:	08002177 	.word	0x08002177
 80020f8:	08002177 	.word	0x08002177
 80020fc:	08002177 	.word	0x08002177
 8002100:	08002177 	.word	0x08002177
 8002104:	08002177 	.word	0x08002177
 8002108:	08002177 	.word	0x08002177
 800210c:	08002125 	.word	0x08002125
 8002110:	08002139 	.word	0x08002139
 8002114:	4a79      	ldr	r2, [pc, #484]	; (80022fc <HAL_GPIO_Init+0x2b4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800211a:	e02c      	b.n	8002176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	623b      	str	r3, [r7, #32]
          break;
 8002122:	e029      	b.n	8002178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	3304      	adds	r3, #4
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e024      	b.n	8002178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	3308      	adds	r3, #8
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e01f      	b.n	8002178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	330c      	adds	r3, #12
 800213e:	623b      	str	r3, [r7, #32]
          break;
 8002140:	e01a      	b.n	8002178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800214a:	2304      	movs	r3, #4
 800214c:	623b      	str	r3, [r7, #32]
          break;
 800214e:	e013      	b.n	8002178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002158:	2308      	movs	r3, #8
 800215a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69fa      	ldr	r2, [r7, #28]
 8002160:	611a      	str	r2, [r3, #16]
          break;
 8002162:	e009      	b.n	8002178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002164:	2308      	movs	r3, #8
 8002166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	615a      	str	r2, [r3, #20]
          break;
 800216e:	e003      	b.n	8002178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
          break;
 8002174:	e000      	b.n	8002178 <HAL_GPIO_Init+0x130>
          break;
 8002176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2bff      	cmp	r3, #255	; 0xff
 800217c:	d801      	bhi.n	8002182 <HAL_GPIO_Init+0x13a>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_Init+0x13e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d802      	bhi.n	8002194 <HAL_GPIO_Init+0x14c>
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x152>
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3b08      	subs	r3, #8
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	210f      	movs	r1, #15
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fa01 f303 	lsl.w	r3, r1, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	6a39      	ldr	r1, [r7, #32]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	431a      	orrs	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80b1 	beq.w	800232a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021c8:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_GPIO_Init+0x2b8>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <HAL_GPIO_Init+0x2b8>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x2b8>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e0:	4a48      	ldr	r2, [pc, #288]	; (8002304 <HAL_GPIO_Init+0x2bc>)
 80021e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_GPIO_Init+0x2c0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d013      	beq.n	8002234 <HAL_GPIO_Init+0x1ec>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a3f      	ldr	r2, [pc, #252]	; (800230c <HAL_GPIO_Init+0x2c4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d00d      	beq.n	8002230 <HAL_GPIO_Init+0x1e8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a3e      	ldr	r2, [pc, #248]	; (8002310 <HAL_GPIO_Init+0x2c8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <HAL_GPIO_Init+0x1e4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <HAL_GPIO_Init+0x2cc>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_GPIO_Init+0x1e0>
 8002224:	2303      	movs	r3, #3
 8002226:	e006      	b.n	8002236 <HAL_GPIO_Init+0x1ee>
 8002228:	2304      	movs	r3, #4
 800222a:	e004      	b.n	8002236 <HAL_GPIO_Init+0x1ee>
 800222c:	2302      	movs	r3, #2
 800222e:	e002      	b.n	8002236 <HAL_GPIO_Init+0x1ee>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_GPIO_Init+0x1ee>
 8002234:	2300      	movs	r3, #0
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	f002 0203 	and.w	r2, r2, #3
 800223c:	0092      	lsls	r2, r2, #2
 800223e:	4093      	lsls	r3, r2
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002246:	492f      	ldr	r1, [pc, #188]	; (8002304 <HAL_GPIO_Init+0x2bc>)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	089b      	lsrs	r3, r3, #2
 800224c:	3302      	adds	r3, #2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	492c      	ldr	r1, [pc, #176]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	4928      	ldr	r1, [pc, #160]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002288:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4922      	ldr	r1, [pc, #136]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	43db      	mvns	r3, r3
 800229e:	491e      	ldr	r1, [pc, #120]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d006      	beq.n	80022be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	4918      	ldr	r1, [pc, #96]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	4914      	ldr	r1, [pc, #80]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d021      	beq.n	800231c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	490e      	ldr	r1, [pc, #56]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60cb      	str	r3, [r1, #12]
 80022e4:	e021      	b.n	800232a <HAL_GPIO_Init+0x2e2>
 80022e6:	bf00      	nop
 80022e8:	10320000 	.word	0x10320000
 80022ec:	10310000 	.word	0x10310000
 80022f0:	10220000 	.word	0x10220000
 80022f4:	10210000 	.word	0x10210000
 80022f8:	10120000 	.word	0x10120000
 80022fc:	10110000 	.word	0x10110000
 8002300:	40021000 	.word	0x40021000
 8002304:	40010000 	.word	0x40010000
 8002308:	40010800 	.word	0x40010800
 800230c:	40010c00 	.word	0x40010c00
 8002310:	40011000 	.word	0x40011000
 8002314:	40011400 	.word	0x40011400
 8002318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_GPIO_Init+0x304>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	43db      	mvns	r3, r3
 8002324:	4909      	ldr	r1, [pc, #36]	; (800234c <HAL_GPIO_Init+0x304>)
 8002326:	4013      	ands	r3, r2
 8002328:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	3301      	adds	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	fa22 f303 	lsr.w	r3, r2, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	f47f ae8e 	bne.w	800205c <HAL_GPIO_Init+0x14>
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	372c      	adds	r7, #44	; 0x2c
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
 800236c:	e001      	b.n	8002372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800236e:	2300      	movs	r3, #0
 8002370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]
 800238a:	4613      	mov	r3, r2
 800238c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800238e:	787b      	ldrb	r3, [r7, #1]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002394:	887a      	ldrh	r2, [r7, #2]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800239a:	e003      	b.n	80023a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	041a      	lsls	r2, r3, #16
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	611a      	str	r2, [r3, #16]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr

080023ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	460b      	mov	r3, r1
 80023b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c0:	887a      	ldrh	r2, [r7, #2]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	041a      	lsls	r2, r3, #16
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43d9      	mvns	r1, r3
 80023cc:	887b      	ldrh	r3, [r7, #2]
 80023ce:	400b      	ands	r3, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	611a      	str	r2, [r3, #16]
}
 80023d6:	bf00      	nop
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e26c      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8087 	beq.w	800250e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002400:	4b92      	ldr	r3, [pc, #584]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 030c 	and.w	r3, r3, #12
 8002408:	2b04      	cmp	r3, #4
 800240a:	d00c      	beq.n	8002426 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800240c:	4b8f      	ldr	r3, [pc, #572]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b08      	cmp	r3, #8
 8002416:	d112      	bne.n	800243e <HAL_RCC_OscConfig+0x5e>
 8002418:	4b8c      	ldr	r3, [pc, #560]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b89      	ldr	r3, [pc, #548]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d06c      	beq.n	800250c <HAL_RCC_OscConfig+0x12c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d168      	bne.n	800250c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e246      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x76>
 8002448:	4b80      	ldr	r3, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a7f      	ldr	r2, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e02e      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x98>
 800245e:	4b7b      	ldr	r3, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a7a      	ldr	r2, [pc, #488]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e01d      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0xbc>
 8002482:	4b72      	ldr	r3, [pc, #456]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a71      	ldr	r2, [pc, #452]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a6e      	ldr	r2, [pc, #440]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0xd4>
 800249c:	4b6b      	ldr	r3, [pc, #428]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6a      	ldr	r2, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b68      	ldr	r3, [pc, #416]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a67      	ldr	r2, [pc, #412]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff fa74 	bl	80019a8 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7ff fa70 	bl	80019a8 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1fa      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b5d      	ldr	r3, [pc, #372]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0xe4>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7ff fa60 	bl	80019a8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7ff fa5c 	bl	80019a8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	; 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e1e6      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x10c>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d063      	beq.n	80025e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251a:	4b4c      	ldr	r3, [pc, #304]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00b      	beq.n	800253e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002526:	4b49      	ldr	r3, [pc, #292]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b08      	cmp	r3, #8
 8002530:	d11c      	bne.n	800256c <HAL_RCC_OscConfig+0x18c>
 8002532:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d116      	bne.n	800256c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_RCC_OscConfig+0x176>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d001      	beq.n	8002556 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e1ba      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4939      	ldr	r1, [pc, #228]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256a:	e03a      	b.n	80025e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d020      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002574:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7ff fa15 	bl	80019a8 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002580:	e008      	b.n	8002594 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002582:	f7ff fa11 	bl	80019a8 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e19b      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f0      	beq.n	8002582 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4927      	ldr	r1, [pc, #156]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	e015      	b.n	80025e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x270>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff f9f4 	bl	80019a8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c4:	f7ff f9f0 	bl	80019a8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e17a      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	4b1d      	ldr	r3, [pc, #116]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03a      	beq.n	8002664 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d019      	beq.n	800262a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025f6:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HAL_RCC_OscConfig+0x274>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fc:	f7ff f9d4 	bl	80019a8 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7ff f9d0 	bl	80019a8 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e15a      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <HAL_RCC_OscConfig+0x26c>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002622:	2001      	movs	r0, #1
 8002624:	f000 faa6 	bl	8002b74 <RCC_Delay>
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_OscConfig+0x274>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002630:	f7ff f9ba 	bl	80019a8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002636:	e00f      	b.n	8002658 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f9b6 	bl	80019a8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d908      	bls.n	8002658 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e140      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	42420000 	.word	0x42420000
 8002654:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002658:	4b9e      	ldr	r3, [pc, #632]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e9      	bne.n	8002638 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80a6 	beq.w	80027be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002672:	2300      	movs	r3, #0
 8002674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002676:	4b97      	ldr	r3, [pc, #604]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10d      	bne.n	800269e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b94      	ldr	r3, [pc, #592]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	4a93      	ldr	r2, [pc, #588]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800268c:	61d3      	str	r3, [r2, #28]
 800268e:	4b91      	ldr	r3, [pc, #580]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	60bb      	str	r3, [r7, #8]
 8002698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269a:	2301      	movs	r3, #1
 800269c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	4b8e      	ldr	r3, [pc, #568]	; (80028d8 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d118      	bne.n	80026dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026aa:	4b8b      	ldr	r3, [pc, #556]	; (80028d8 <HAL_RCC_OscConfig+0x4f8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a8a      	ldr	r2, [pc, #552]	; (80028d8 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b6:	f7ff f977 	bl	80019a8 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026be:	f7ff f973 	bl	80019a8 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b64      	cmp	r3, #100	; 0x64
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e0fd      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d106      	bne.n	80026f2 <HAL_RCC_OscConfig+0x312>
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	4a7a      	ldr	r2, [pc, #488]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6213      	str	r3, [r2, #32]
 80026f0:	e02d      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x334>
 80026fa:	4b76      	ldr	r3, [pc, #472]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	4a75      	ldr	r2, [pc, #468]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6213      	str	r3, [r2, #32]
 8002706:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a72      	ldr	r2, [pc, #456]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800270c:	f023 0304 	bic.w	r3, r3, #4
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	e01c      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	2b05      	cmp	r3, #5
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_OscConfig+0x356>
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	4a6c      	ldr	r2, [pc, #432]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002722:	f043 0304 	orr.w	r3, r3, #4
 8002726:	6213      	str	r3, [r2, #32]
 8002728:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6213      	str	r3, [r2, #32]
 8002734:	e00b      	b.n	800274e <HAL_RCC_OscConfig+0x36e>
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a66      	ldr	r2, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800273c:	f023 0301 	bic.w	r3, r3, #1
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	4a63      	ldr	r2, [pc, #396]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002748:	f023 0304 	bic.w	r3, r3, #4
 800274c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d015      	beq.n	8002782 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7ff f927 	bl	80019a8 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800275c:	e00a      	b.n	8002774 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275e:	f7ff f923 	bl	80019a8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	f241 3288 	movw	r2, #5000	; 0x1388
 800276c:	4293      	cmp	r3, r2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e0ab      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	4b57      	ldr	r3, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ee      	beq.n	800275e <HAL_RCC_OscConfig+0x37e>
 8002780:	e014      	b.n	80027ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002782:	f7ff f911 	bl	80019a8 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002788:	e00a      	b.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278a:	f7ff f90d 	bl	80019a8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	f241 3288 	movw	r2, #5000	; 0x1388
 8002798:	4293      	cmp	r3, r2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e095      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ee      	bne.n	800278a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d105      	bne.n	80027be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b2:	4b48      	ldr	r3, [pc, #288]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	4a47      	ldr	r2, [pc, #284]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80027b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8081 	beq.w	80028ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c8:	4b42      	ldr	r3, [pc, #264]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d061      	beq.n	8002898 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d146      	bne.n	800286a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x4fc>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f8e1 	bl	80019a8 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f8dd 	bl	80019a8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e067      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002810:	d108      	bne.n	8002824 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002812:	4b30      	ldr	r3, [pc, #192]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	492d      	ldr	r1, [pc, #180]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002824:	4b2b      	ldr	r3, [pc, #172]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a19      	ldr	r1, [r3, #32]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	430b      	orrs	r3, r1
 8002836:	4927      	ldr	r1, [pc, #156]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 8002838:	4313      	orrs	r3, r2
 800283a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x4fc>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7ff f8b1 	bl	80019a8 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff f8ad 	bl	80019a8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e037      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x46a>
 8002868:	e02f      	b.n	80028ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_RCC_OscConfig+0x4fc>)
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff f89a 	bl	80019a8 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7ff f896 	bl	80019a8 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e020      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288a:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x498>
 8002896:	e018      	b.n	80028ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e013      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d106      	bne.n	80028c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d001      	beq.n	80028ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420060 	.word	0x42420060

080028e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0d0      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d910      	bls.n	8002924 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 0207 	bic.w	r2, r3, #7
 800290a:	4965      	ldr	r1, [pc, #404]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	4313      	orrs	r3, r2
 8002910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	4a58      	ldr	r2, [pc, #352]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002946:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a52      	ldr	r2, [pc, #328]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800295e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	4313      	orrs	r3, r2
 8002970:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d040      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d115      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d107      	bne.n	80029ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299e:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d109      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e073      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ae:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e06b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f023 0203 	bic.w	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4936      	ldr	r1, [pc, #216]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d0:	f7fe ffea 	bl	80019a8 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe ffe6 	bl	80019a8 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e053      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 020c 	and.w	r2, r3, #12
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d1eb      	bne.n	80029d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a00:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d210      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4922      	ldr	r1, [pc, #136]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1cc>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ff48 	bl	8001924 <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08002c30 	.word	0x08002c30
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b490      	push	{r4, r7}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002abc:	1d3c      	adds	r4, r7, #4
 8002abe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ac0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ac4:	f240 2301 	movw	r3, #513	; 0x201
 8002ac8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x46>
 8002af2:	e02d      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	e02d      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	0c9b      	lsrs	r3, r3, #18
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b06:	4413      	add	r3, r2
 8002b08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b18:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c5b      	lsrs	r3, r3, #17
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b26:	4413      	add	r3, r2
 8002b28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b32:	fb02 f203 	mul.w	r2, r2, r3
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3e:	e004      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	623b      	str	r3, [r7, #32]
      break;
 8002b4e:	e002      	b.n	8002b56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b52:	623b      	str	r3, [r7, #32]
      break;
 8002b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b56:	6a3b      	ldr	r3, [r7, #32]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3728      	adds	r7, #40	; 0x28
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc90      	pop	{r4, r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	08002c20 	.word	0x08002c20
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	007a1200 	.word	0x007a1200
 8002b70:	003d0900 	.word	0x003d0900

08002b74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ba8 <RCC_Delay+0x34>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <RCC_Delay+0x38>)
 8002b82:	fba2 2303 	umull	r2, r3, r2, r3
 8002b86:	0a5b      	lsrs	r3, r3, #9
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b90:	bf00      	nop
  }
  while (Delay --);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	60fa      	str	r2, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f9      	bne.n	8002b90 <RCC_Delay+0x1c>
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	10624dd3 	.word	0x10624dd3

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	4d0c      	ldr	r5, [pc, #48]	; (8002be8 <__libc_init_array+0x38>)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb8:	1b64      	subs	r4, r4, r5
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	f000 f822 	bl	8002c08 <_init>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	4d0a      	ldr	r5, [pc, #40]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	; (8002bf4 <__libc_init_array+0x44>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002c40 	.word	0x08002c40
 8002bec:	08002c40 	.word	0x08002c40
 8002bf0:	08002c40 	.word	0x08002c40
 8002bf4:	08002c44 	.word	0x08002c44

08002bf8 <memset>:
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	4402      	add	r2, r0
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	f803 1b01 	strb.w	r1, [r3], #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
